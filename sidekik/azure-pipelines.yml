trigger:
  branches:
    include:
      - master

schedules:
- cron: "0 14 * * *"         # Daily at 2:00 PM (cron uses UTC)
  displayName: "Daily Build at 2 PM"
  branches:
    include:
      - master
  always: true

pool:
  vmImage: 'ubuntu-latest'

steps:
- checkout: self

- script: |
    mvn -B clean compile
  displayName: 'Maven Clean and Compile'

- script: |
    mvn -B test
  displayName: 'Run Tests'

- task: PublishTestResults@2
  inputs:
    testResultsFormat: 'JUnit'
    testResultsFiles: '**/target/surefire-reports/*.xml'
    mergeTestResults: true
    failTaskOnFailedTests: true
  displayName: 'Publish Test Results'

- script: |
    mvn -B package
  displayName: 'Maven Package'

# Install PowerShell Modules for Email
- script: |
    Install-PackageProvider -Name NuGet -Force
    Install-Module -Name PowerShellGet -Force -AllowClobber
    Install-Module -Name Posh-Git -Force -AllowClobber
  displayName: 'Install Required PowerShell Modules'

# Send email notification with test results
- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: |
      $smtpServer = "smtp.gmail.com"
      $smtpPort = 587
      $smtpFrom = "dhiral@zerotimesolutions.com"
      $smtpTo = "kelvin@zerotimesolutions.com"
      $smtpUsername = "dhiral@zerotimesolutions.com"
      $smtpPassword = "$(SMTP_PASSWORD)"

      $buildNumber = "$(Build.BuildNumber)"
      $buildStatus = "$(Build.Status)"
      $buildUrl = "$(System.TeamFoundationCollectionUri)$(System.TeamProject)/_build/results?buildId=$(Build.BuildId)"

      $subject = "Test Results for Build $buildNumber: $buildStatus"
      $body = @"
      <p>Test results for Build <b>$buildNumber</b>:</p>
      <p>Status: <b>$buildStatus</b></p>
      <p>View details: <a href='$buildUrl'>$buildUrl</a></p>
    "@

    try {
      $smtpClient = New-Object System.Net.Mail.SmtpClient($smtpServer, $smtpPort)
      $smtpClient.EnableSsl = $true
      $smtpClient.Credentials = New-Object System.Net.NetworkCredential($smtpUsername, $smtpPassword)
      
      $mailMessage = New-Object System.Net.Mail.MailMessage
      $mailMessage.From = $smtpFrom
      $mailMessage.To.Add($smtpTo)
      $mailMessage.Subject = $subject
      $mailMessage.Body = $body
      $mailMessage.IsBodyHtml = $true

      $smtpClient.Send($mailMessage)
      Write-Host "Email sent successfully."
    }
    catch {
      Write-Error "Error sending email: $_"
    }
  condition: always()
  displayName: 'Send Email Notification'
